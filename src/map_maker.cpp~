#include "map_maker.h"
#include <fstream>
map_maker::map_maker(){
  nRetVal = XN_STATUS_OK;
  nRetVal = context.Init();
  checkError("Error creating context: ", nRetVal);
  nRetVal = depth.Create(context);
  checkError("Error creating depth generator: ", nRetVal);
  init();
}
void map_maker::init(){
  nRetVal = context.StartGeneratingAll();
  checkError("Error starting the depth generator: ", nRetVal);
};
void map_maker::stop(){
  xnContextRelease((XnContext*)&context);
}
void map_maker::grabFrame(){
  nRetVal = context.WaitOneUpdateAll(depth);
  checkError("Failed updating data: ", nRetVal);
  // Take current depth map  
  const XnDepthPixel* pDepthMap = depth.GetDepthMap();
  ofstream file("depth_texture.bin", std::ios::binary);
  float data[640*480];
  for(int i = 0; i < 640*480; i++){
    data[i]=(float)(*(pDepthMap+i));
  } 
  file.write((char *)data, 640*480*4);
  file.close();
  //std::cout<<"(float)pDepthMap[0] = "<<(float)pDepthMap[0]<<endl;
}

void map_maker::checkError(std::string where, XnStatus what){
  if(!(nRetVal==XN_STATUS_OK)){
    cout<<where<<xnGetStatusString(what)<<endl;
    exit(0);
  }
  return;
}
